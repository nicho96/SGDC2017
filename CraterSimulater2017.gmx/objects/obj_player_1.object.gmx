<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ast1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>speed = 7
direction = 270
isFinished = false
mass = 60;
hspd = 0;
movespeed = 15;
hfriction = .2;
haccel = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!isFinished) {

    scale = mass / 100;
    image_xscale = scale;
    image_yscale = scale;

    //Sets down to true if S or gamepad D is pressed
    key_down = keyboard_check(ord('K')) || gamepad_button_check(1, gp_padd);
    key_left = keyboard_check(ord('J')) || gamepad_button_check(1, gp_padl);
    key_right = keyboard_check(ord('L')) || gamepad_button_check(1, gp_padr);
    key_up = keyboard_check_pressed(ord('I')) || gamepad_button_check_pressed(1, gp_face1);
    
    if(key_up &amp;&amp; mass &gt; 50){
        //Asteroid
        ast = instance_create(x, y - 25, obj_player_ast);
        ast.mass = 10;
        ast.scale = 0.2;
        ast.image_xscale = ast.scale;
        ast.image_yscale = ast.scale;
        ast.direction = 90;
        ast.speed = 10;
        ast.parent = 1;
        
        //Self
        mass -= 10;
        speed += 1;
    }
    
    //set deadzone for analog
    gamepad_set_axis_deadzone(0, 0.25);
    
    gamepad_hor = gamepad_axis_value(1, gp_axislh);
    gamepad_ver = gamepad_axis_value(1, gp_axislv);
    
    //hspd = 0;
    //gamepad horizontal movement 
    if(gamepad_hor != 0){
        if(hspd &gt; -10 &amp;&amp; hspd &lt; 10){
            hspd += haccel * gamepad_hor;
        }
    }
    
    if(hspd &gt; 10){
        hspd = 10;
    }else if(hspd &lt; -10) {
        hspd = -10;
    }
    
    if(!(key_right &amp;&amp; key_left)){
        if(key_right){
            if(hspd &lt; 10)
                hspd += haccel;
            else
                hspd = 10;
        }else if(key_left){
           if(hspd &gt; -10)
                hspd -= haccel;
           else
                hspd = -10;
        }
    }
    
    //If player is hitting no dir keys, or both keys, and analog is @ pos 0
    if(hspd &gt; 0)
        hspd -= hfriction;
    if(hspd &lt; 0)
        hspd += hfriction;
    
    //applies horizontal movement (keep after all calc)
    x += hspd;
    
    image_angle = (image_angle + 1) % 360
    
    if(y &gt; room_height){
        isFinished = true;
    }
    
    if(speed &lt; 1){
        speed = 1;
    }
    
    if(x &lt; 0){
        x = 0;
    }else if(x &gt; room_width){
        x = room_width;
    }
    
}else{
    speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_ast">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(other.parent != 1){
    mass += other.mass * 0.1 //10% of mass is transfered
    speed -= other.mass / 100
    instance_create(other.x, other.y, obj_part_group_purp);
    with(other){
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_planet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>isFinished = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(isFinished)
    draw_sprite_ext(spr_done, 0, 20, 290, 1, 1, 0, c_white, 1);

width = speed / 20 * 300;
draw_sprite(spr_health_back_p1, -1, 10 , 10);
draw_sprite_part(spr_health_center_p1, -1, 0, 0, width, 70, 10 , 10);
draw_sprite(spr_health_top_p1, -1, 10 , 10);

draw_set_color(c_white);
draw_text(10, 10, mass);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

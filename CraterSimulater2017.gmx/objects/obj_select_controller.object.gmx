<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>p1_bar_pos = 1;
p1_ready = false;

p2_bar_pos = 1;
p2_ready = false;

audio_stop_all();
audio_play_sound(snd_main_menu, 1, true);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Player 1 select screen controls (WASD &amp; Controller (0))
p1_key_up =  keyboard_check_pressed(ord('W')) || gamepad_button_check_pressed(0, gp_padu);
p1_key_down = keyboard_check_pressed(ord('S')) || gamepad_button_check_pressed(0, gp_padd);
p1_key_right = keyboard_check_pressed(ord('D')) || gamepad_button_check_pressed(0, gp_padr);
p1_key_left = keyboard_check_pressed(ord('A')) || gamepad_button_check_pressed(0, gp_padl);
p1_key_return = keyboard_check_pressed(vk_escape) || gamepad_button_check_pressed(0, gp_face2);
p1_key_action = keyboard_check_pressed(vk_space) || gamepad_button_check_pressed(0, gp_face1);

//Player 2 select screen controls (Arrow keys &amp; Controller (1))
p2_key_up = keyboard_check_pressed(vk_up) || gamepad_button_check_pressed(1, gp_padu);
p2_key_down = keyboard_check_pressed(vk_down) || gamepad_button_check_pressed(1, gp_padd);
p2_key_right = keyboard_check_pressed(vk_right) ||  gamepad_button_check_pressed(1, gp_padr);
p2_key_left = keyboard_check_pressed(vk_left) ||  gamepad_button_check_pressed(1, gp_padl);
p2_key_return = keyboard_check_pressed(vk_backspace) || gamepad_button_check_pressed(1, gp_face2);
p2_key_action = keyboard_check_pressed(vk_enter) || gamepad_button_check_pressed(1, gp_face1);

//return to menu
if(!p1_ready){
    if(p1_key_return)
        room_goto(rm_mmenu);
}
//Moving left highlight bar
if(p1_bar_pos == 1){
    obj_p1bar.x = 362;
    obj_p1bar.y = 195;
    obj_p1bar.image_xscale = .58;
    obj_p1bar.image_xscale = .62;
}else if(p1_bar_pos == 2){
    obj_p1bar.x = 363;
    obj_p1bar.y = 400;
    obj_p1bar.image_xscale = .56;
    obj_p1bar.image_yscale = .55;
}else if(p1_bar_pos == 3){
    obj_p1bar.x = 357;
    obj_p1bar.y = 566;
    obj_p1bar.image_xscale = .64;
    obj_p1bar.image_yscale = .33;
}else{
    obj_p1bar.x = 360;
    obj_p1bar.y = 655;
    obj_p1bar.image_xscale = .27;
    obj_p1bar.image_yscale = .28;    
}

//Moving right highlight bar
if(p2_bar_pos == 1){
    obj_p2bar.x = 640 + 282;
    obj_p2bar.y = 195;
    obj_p2bar.image_xscale = .58;
    obj_p2bar.image_xscale = .62;
}else if(p2_bar_pos == 2){
    obj_p2bar.x = 640 + 283;
    obj_p2bar.y = 405;
    obj_p2bar.image_xscale = .56;
    obj_p2bar.image_yscale = .55;
}else if(p2_bar_pos == 3){
    obj_p2bar.x = 640 + 283;
    obj_p2bar.y = 566;
    obj_p2bar.image_xscale = .64;
    obj_p2bar.image_yscale = .33;
}else{
    obj_p2bar.x = 640 + 275;
    obj_p2bar.y = 655;
    obj_p2bar.image_xscale = .27;
    obj_p2bar.image_yscale = .28;    
}

//Changing selection (No wrapping)
if(p1_key_down){
    if (p1_bar_pos &lt; 4){
        p1_bar_pos ++;
        audio_play_sound(snd_menu_move,1,false);
    }
}

if(p1_key_up){
    if (p1_bar_pos &gt; 1){
        p1_bar_pos --;
        audio_play_sound(snd_menu_move,1,false);
     }
}

if(p2_key_down){
    if (p2_bar_pos &lt; 4){
        p2_bar_pos ++;
        audio_play_sound(snd_menu_move,1,false);
    }
}

if(p2_key_up){
    if (p2_bar_pos &gt; 1){
        p2_bar_pos --;
        audio_play_sound(snd_menu_move,1,false);
    }
}

if(p1_bar_pos == 1){
    if(p1_key_right){//*DRAW SKIN SPRITE ON BUBBLE*
        audio_play_sound(snd_menu_move,1,false);
        global.p1_skin ++;
        if(global.p1_skin &gt; 4)
            global.p1_skin = 1;
    }
    if(p1_key_left){//*DRAW SKIN SPRITE ON BUBBLE*
        audio_play_sound(snd_menu_move,1,false);
        global.p1_skin --;
        if(global.p1_skin &lt; 1)
            global.p1_skin = 4;
    }
}
if(p1_bar_pos == 2){
    if(p1_key_right){//DRAW SPRITE ON BUBBLE
        audio_play_sound(snd_menu_move,1,false);
        global.p1_hat ++;
        if(global.p1_hat &gt; 3)
            global.p1_hat = 0;
    }
    if(p1_key_left){//DRAW SPRITE ON BUBBZZ
        audio_play_sound(snd_menu_move,1,false);
        global.p1_hat --;
        if(global.p1_hat &lt; 0)
            global.p1_hat = 3;
    }   
}
if(p1_bar_pos == 3){
    if(p1_key_right){
        audio_play_sound(snd_menu_move,1,false);
        global.p1_glasses ++;
        if(global.p1_glasses &gt; 3)
            global.p1_glasses = 0;
    }
    if(p1_key_left){
        audio_play_sound(snd_menu_move,1,false);
        global.p1_glasses --;
        if(global.p1_glasses &lt; 0)
            global.p1_glasses = 3;
    }
}

if(p1_bar_pos == 4){
    if(p1_key_action){
        audio_play_sound(snd_readycheck,1,false);
        p1_ready = !p1_ready;
        p = instance_find(obj_go, 0);
        p.visible = !p1_ready;
        
    }
    if(p2_key_action){
        audio_play_sound(snd_readycheck,1,false);
        p2_ready = !p2_ready;
        p = instance_find(obj_go, 1);
        p.visible = !p2_ready;
    }
}

if(p1_ready &amp;&amp; p2_ready){
    room_goto(rm_main);
}

//sets all transparent
obj_p1_skin.image_alpha = 0;

//Showing Sprites
if(global.p1_skin == 1)
    obj_p1_skin_1.image_alpha = 255;
if(global.p1_skin == 2)
    obj_p1_skin_2.image_alpha = 255;
if(global.p1_skin == 3)
    obj_p1_skin_3.image_alpha = 255;
if(global.p1_skin == 4)
    obj_p1_skin_4.image_alpha = 255;
    
//obj_p1_skin_1.image_alpha = 255;    
//obj_p1_skin_2.image_alpha = 255;

obj_p1_hat.image_alpha = 0;
//Showing hat sprites
if(global.p1_hat == 0)
    obj_p1_hat_0.image_alpha = 255;
if(global.p1_hat == 1)
    obj_p1_hat_1.image_alpha = 255;
if(global.p1_hat == 2)
    obj_p1_hat_2.image_alpha = 255;
if(global.p1_hat == 3)
    obj_p1_hat_3.image_alpha = 255;


obj_p1_glasses.image_alpha = 0;    
//Showing glasses sprites
if(global.p1_glasses == 0)
    obj_p1_glasses_0.image_alpha = 255;
if(global.p1_glasses == 1)
    obj_p1_glasses_1.image_alpha = 255;
if(global.p1_glasses == 2)
    obj_p1_glasses_2.image_alpha = 255;
if(global.p1_glasses == 3)
    obj_p1_glasses_3.image_alpha = 255;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

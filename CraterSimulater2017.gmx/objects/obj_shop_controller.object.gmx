<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>box_pos = 1;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>key_action = keyboard_check_pressed(vk_space) || keyboard_check_pressed(vk_enter) || gamepad_button_check_pressed(0, gp_face1) || gamepad_button_check_pressed(1, gp_face1);
key_up = keyboard_check_pressed(ord('W')) || keyboard_check_pressed(vk_up) || keyboard_check_pressed(vk_up) || gamepad_button_check_pressed(1, gp_padu) || gamepad_button_check_pressed(0, gp_padu);
key_down = keyboard_check_pressed(ord('S')) || keyboard_check_pressed(vk_down) || gamepad_button_check_pressed(0, gp_padd) || gamepad_button_check_pressed(1, gp_padd);
key_right = keyboard_check_pressed(ord('D')) || gamepad_button_check_pressed(0, gp_padr) || keyboard_check_pressed(vk_right) ||  gamepad_button_check_pressed(1, gp_padr);
key_left = keyboard_check_pressed(ord('A')) || gamepad_button_check_pressed(0, gp_padl) || keyboard_check_pressed(vk_left) ||  gamepad_button_check_pressed(1, gp_padl);
key_return = keyboard_check_pressed(vk_escape) || gamepad_button_check_pressed(0, gp_face2) || keyboard_check_pressed(vk_backspace) || gamepad_button_check_pressed(1, gp_face2);
key_action = keyboard_check_pressed(vk_enter) || gamepad_button_check_pressed(0, gp_face1) || keyboard_check_pressed(vk_space) || gamepad_button_check_pressed(1, gp_face1);

obj_lock1.x = 128;
obj_lock1.y = 114;
obj_lock1.image_xscale = 0.30;
obj_lock1.image_yscale = 0.30;
obj_lock2.x = 403;
obj_lock2.y = 106;
obj_lock2.image_xscale = 0.30;
obj_lock2.image_yscale = 0.30;
obj_lock3.x = 114;
obj_lock3.y = 290;
obj_lock3.image_xscale = 0.30;
obj_lock3.image_yscale = 0.30;
obj_lock4.x = 407;
obj_lock4.y = 300;
obj_lock4.image_xscale = 0.30;
obj_lock4.image_yscale = 0.30;
obj_lock5.x = 114;
obj_lock5.y = 461;
obj_lock5.image_xscale = 0.30;
obj_lock5.image_yscale = 0.30;
obj_lock6.x = 114;
obj_lock6.y = 542;
obj_lock6.image_xscale = 0.30;
obj_lock6.image_yscale = 0.30;
obj_lock7.x = 114;
obj_lock7.y = 614;
obj_lock7.image_xscale = 0.30;
obj_lock7.image_yscale = 0.30;
obj_lock8.x = 399;
obj_lock8.y = 494;
obj_lock8.image_xscale = 0.30;
obj_lock8.image_yscale = 0.30;
obj_tv.x = 288;
obj_tv.y = 192;
obj_tv.image_xscale = 0.50;
obj_tv.image_yscale = 0.50;
obj_duck.x = 99;
obj_duck.y = 221;
obj_duck.image_xscale = 0.35;
obj_duck.image_yscale = 0.35;


//Moving underlay
if(box_pos == 1){
    obj_underlay.x = 101;
    obj_underlay.y = 46;
    obj_underlay.image_xscale = 0.83;
    obj_underlay.image_yscale = 0.74;
}else if(box_pos == 2){
    obj_underlay.x = 365;
    obj_underlay.y = 39;
    obj_underlay.image_xscale = 0.83;
    obj_underlay.image_yscale = 0.74;
}else if(box_pos == 3){
    obj_underlay.x = 103;
    obj_underlay.y = 235;
    obj_underlay.image_xscale = 0.77;
    obj_underlay.image_yscale = 0.68;
}else if(box_pos == 4){
    obj_underlay.x = 383;
    obj_underlay.y = 233;
    obj_underlay.image_xscale = 0.78;
    obj_underlay.image_yscale = 0.73;
}else if(box_pos == 5){
    obj_underlay.x = 94;
    obj_underlay.y = 437;
    obj_underlay.image_xscale = 0.79;
    obj_underlay.image_yscale = 0.31;
}else if(box_pos == 6){
    obj_underlay.x = 101;
    obj_underlay.y = 517;
    obj_underlay.image_xscale = 0.76;
    obj_underlay.image_yscale = 0.31;
}else if(box_pos == 7){
    obj_underlay.x = 102;
    obj_underlay.y = 596;
    obj_underlay.image_xscale = 0.73;
    obj_underlay.image_yscale = 0.27;
}else if(box_pos == 8){
    obj_underlay.x = 366;
    obj_underlay.y = 420;
    obj_underlay.image_xscale = 0.81;
    obj_underlay.image_yscale = 0.79;
}

//changing position on movement
if(key_up){
    if(box_pos == 3)
        box_pos = 1;
    else if(box_pos == 4)
        box_pos = 2;
    else if(box_pos == 5)
        box_pos = 3;
    else if(box_pos == 6)
        box_pos = 5;
    else if(box_pos == 7)
        box_pos = 6;
    else if(box_pos == 8)
        box_pos = 4;        
}

if(key_down){
    if(box_pos == 1)
        box_pos = 3;
    else if(box_pos == 2)
        box_pos = 4;
    else if(box_pos == 3)
        box_pos = 5; 
    else if(box_pos == 4)
        box_pos = 8;
    else if(box_pos == 5)
        box_pos = 6;
    else if(box_pos == 6)
        box_pos = 7;       
}

if(key_right){
    if(box_pos == 1)
        box_pos = 2;
    else if(box_pos == 3)
        box_pos = 4;
    else if(box_pos == 5)
        box_pos = 8; 
    else if(box_pos == 6)
        box_pos = 8;
    else if(box_pos == 7)
        box_pos = 8;      
}

if(key_left){
    if(box_pos == 2)
        box_pos = 1;
    else if(box_pos == 4)
        box_pos = 3;
    else if(box_pos == 8)
        box_pos = 5;     
}

cost1 = 1;
cost2 = 1;
cost3 = 1;
cost4 = 1;
cost5 = 1;
cost6 = 1;
cost7 = 1;
cost8 = 1;

if(key_action){
    if(box_pos == 1 &amp;&amp; global.total_quartz &gt;= cost1){
        global.tv = true;
        global.total_quartz -= cost1;
    }
    else if(box_pos == 2 &amp;&amp; global.total_quartz &gt;= cost2){
        global.fedora = true;
        global.total_quartz -= cost2;
    }
    else if(box_pos == 3 &amp;&amp; global.total_quartz &gt;= cost3){
        global.duck = true;
        global.total_quartz -= cost1;
    }
    else if(box_pos == 4 &amp;&amp; global.total_quartz &gt;= cost4){
        global.hat2 = true;
        global.total_quartz -= cost1;
    }
    else if(box_pos == 5 &amp;&amp; global.total_quartz &gt;= cost5){
        global.googly = true;
        global.total_quartz -= cost1;
    }
    else if(box_pos == 6 &amp;&amp; global.total_quartz &gt;= cost6){
        global.kamina = true;
        global.total_quartz -= cost1;
    }
    else if(box_pos == 7 &amp;&amp; global.total_quartz &gt;= cost7){
        global.wow = true;
        global.total_quartz -= cost1;
    }
    else if(box_pos == 8 &amp;&amp; global.total_quartz &gt;= cost8){
        global.hat3 = true;
        global.total_quartz -= cost1;
    }
}

//Room selection
if(key_return)
    room_goto(rm_mmenu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
